{"version":3,"sources":["webpack:///./src/components/article/Item.jsx","webpack:///./src/components/article/List.jsx","webpack:///./src/templates/tag.js","webpack:///./src/components/SEO.jsx"],"names":["StyledItem","styled","div","Item","item","className","to","frontmatter","slug","fluid","image","childImageSharp","categories","map","x","idx","key","length","title","date","excerpt","StyledList","List","items","TagPage","data","allFile","edges","tag","pageContext","console","log","node","childMarkdownRemark","pageQuery","SEO","description","lang","meta","home","site","metaDescription","siteMetadata","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps"],"mappings":"sVAMMA,EAAaC,IAAOC,IAAV,sEAAGD,CAAH,+vBAkGDE,EAlCF,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACX,kBAACJ,EAAD,KACE,yBAAKK,UAAW,UACd,kBAAC,OAAD,CAAMC,GAAE,aAAeF,EAAKG,YAAYC,MACtC,kBAAC,IAAD,CAAKC,MAAOL,EAAKG,YAAYG,MAAMC,gBAAgBF,QACnD,yBAAKJ,UAAW,QAAhB,oBAEF,yBAAKA,UAAW,cACbD,EAAKG,YAAYK,WAAWC,KAAI,SAACC,EAAGC,GAAJ,OAC/B,kBAAC,OAAD,CAAMC,IAAKD,EAAKT,GAAE,aAAeQ,GAC9BA,EACAC,EAAMX,EAAKG,YAAYK,WAAWK,OAAS,GAAK,WAKzD,yBAAKZ,UAAW,QACd,4BACE,kBAAC,OAAD,CAAMC,GAAE,aAAeF,EAAKG,YAAYC,MACrCJ,EAAKG,YAAYW,QAGtB,8BAAOd,EAAKG,YAAYY,OAE1B,yBAAKd,UAAW,WACd,2BAAID,EAAKgB,YCzFTC,EAAapB,IAAOC,IAAV,mEAAGD,CAAH,mCAiBDqB,IAZF,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACX,kBAACF,EAAD,KACGE,EAAMV,KAAI,SAACC,EAAGC,GAAJ,OACT,kBAAC,EAAD,CAAMX,KAAMU,EAAGE,IAAKD,U,kCCd1B,8GA+BeS,UAvBC,SAAC,GAKV,IAHeC,EAGhB,EAJJA,KACEC,QAAWC,MAEEC,EACX,EADJC,YAAeD,IAGf,OADAE,QAAQC,IAAIH,GAEV,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKV,MAAOU,IACZ,0DAC8BA,EAD9B,KACqCH,EAAKR,OAD1C,KAGA,kBAAC,IAAD,CAAMM,MAAOE,EAAKZ,KAAI,SAACC,GAAD,OAAOA,EAAEkB,KAAKC,2BAYnC,IAAMC,EAAS,c,mFC5BtB,SAASC,EAAT,GAAwD,IAAzCC,EAAwC,EAAxCA,YAAaC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,KAAMpB,EAAe,EAAfA,MAAOqB,EAAQ,EAARA,KACrCC,EAD6C,OAC7CA,KAcFC,EAAkBL,GAAeI,EAAKE,aAAaN,YAEzD,OACE,kBAAC,SAAD,CACEO,eAAgB,CACdN,QAEFnB,MAAOA,EACP0B,cACEL,EAAOC,EAAKE,aAAaxB,MAArB,QAAqCsB,EAAKE,aAAaxB,MAE7DoB,KAAM,CACJ,CACEO,KAAM,cACNC,QAASL,GAEX,CACEM,SAAU,WACVD,QAAS5B,GAEX,CACE6B,SAAU,iBACVD,QAASL,GAEX,CACEM,SAAU,UACVD,QAAS,WAEX,CACED,KAAM,eACNC,QAAS,WAEX,CACED,KAAM,kBACNC,QAASN,EAAKE,aAAaM,QAE7B,CACEH,KAAM,gBACNC,QAAS5B,GAEX,CACE2B,KAAM,sBACNC,QAASL,IAEXQ,OAAOX,KAKfH,EAAIe,aAAe,CACjBb,KAAM,KACNC,KAAM,GACNF,YAAa,GACbG,MAAM,GAWOJ","file":"component---src-templates-tag-js-0fbe3b10896586911842.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport Img from 'gatsby-image';\nimport { Link } from 'gatsby';\n\nconst StyledItem = styled.div`\n  display: grid;\n  grid-gap: 1rem;\n  grid-template-columns: 1fr 2fr;\n  grid-template-rows: auto;\n  grid-template-areas:\n    'header header'\n    'meta content';\n  .header {\n    position: relative;\n    grid-area: header;\n    height: 140px;\n    overflow: hidden;\n    a {\n      border-bottom: 0px;\n    }\n    img {\n      max-height: 140px;\n    }\n    .categories {\n      position: absolute;\n      top: 0;\n      right: 0;\n      color: rgba(255, 255, 255, 0.75);\n      font-size: 0.8333333333333333em;\n      background: rgba(0, 0, 0, 0.75);\n      padding: 0.1em 0.8em;\n      text-transform: capitalize;\n    }\n    .link {\n      display: none;\n      position: absolute;\n      bottom: 0;\n      right: 0;\n      color: white;\n      font-size: 0.8333333333333333em;\n      background: var(--primary-color);\n      padding: 0.1em 0.8em;\n      text-transform: capitalize;\n    }\n  }\n  .meta {\n    grid-area: meta;\n    color: lightgrey;\n    h4 {\n      margin: 0 0 0.5rem;\n      line-height: 1.5rem;\n    }\n  }\n  .content {\n    grid-area: content;\n    p {\n      margin: 0;\n    }\n  }\n  &:hover {\n    .header {\n      .link {\n        display: block;\n      }\n    }\n  }\n`;\n\nconst Item = ({ item }) => (\n  <StyledItem>\n    <div className={'header'}>\n      <Link to={`/articles/${item.frontmatter.slug}`}>\n        <Img fluid={item.frontmatter.image.childImageSharp.fluid} />\n        <div className={'link'}>Leer artículo →</div>\n      </Link>\n      <div className={'categories'}>\n        {item.frontmatter.categories.map((x, idx) => (\n          <Link key={idx} to={`/category/${x}`}>\n            {x}\n            {idx < item.frontmatter.categories.length - 1 && ', '}\n          </Link>\n        ))}\n      </div>\n    </div>\n    <div className={'meta'}>\n      <h4>\n        <Link to={`/articles/${item.frontmatter.slug}`}>\n          {item.frontmatter.title}\n        </Link>\n      </h4>\n      <span>{item.frontmatter.date}</span>\n    </div>\n    <div className={'content'}>\n      <p>{item.excerpt}</p>\n    </div>\n  </StyledItem>\n);\n\nItem.propTypes = {\n  item: PropTypes.object,\n};\n\nexport default Item;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nimport Item from './Item';\n\nconst StyledList = styled.div`\n  display: grid;\n  grid-gap: 1.5rem;\n`;\n\nconst List = ({ items }) => (\n  <StyledList>\n    {items.map((x, idx) => (\n      <Item item={x} key={idx} />\n    ))}\n  </StyledList>\n);\n\nList.propTypes = {\n  items: PropTypes.array,\n};\n\nexport default List;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql } from 'gatsby';\n\nimport Layout from '../components/Layout';\nimport SEO from '../components/SEO';\nimport List from '../components/article/List';\n\nconst TagPage = ({\n  data: {\n    allFile: { edges: data },\n  },\n  pageContext: { tag },\n}) => {\n  console.log(tag);\n  return (\n    <Layout>\n      <SEO title={tag} />\n      <h4>\n        Filtrando por la etiqueta: {tag} ({data.length})\n      </h4>\n      <List items={data.map((x) => x.node.childMarkdownRemark)} />\n    </Layout>\n  );\n};\n\nTagPage.propTypes = {\n  data: PropTypes.object,\n  pageContext: PropTypes.object,\n};\n\nexport default TagPage;\n\nexport const pageQuery = graphql`\n  query($tag: [String!]) {\n    allFile(\n      filter: {\n        childMarkdownRemark: { frontmatter: { tags: { in: $tag } } }\n        sourceInstanceName: { eq: \"articles\" }\n        extension: { eq: \"md\" }\n      }\n    ) {\n      edges {\n        node {\n          childMarkdownRemark {\n            excerpt\n            frontmatter {\n              slug\n              title\n              date(formatString: \"DD MMMM, YYYY\", locale: \"es-ES\")\n              categories\n              image {\n                childImageSharp {\n                  fluid {\n                    ...GatsbyImageSharpFluid_withWebp\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from 'react-helmet-async';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nfunction SEO({ description, lang, meta, title, home }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={\n        home ? site.siteMetadata.title : `%s | ${site.siteMetadata.title}`\n      }\n      meta={[\n        {\n          name: 'description',\n          content: metaDescription,\n        },\n        {\n          property: 'og:title',\n          content: title,\n        },\n        {\n          property: 'og:description',\n          content: metaDescription,\n        },\n        {\n          property: 'og:type',\n          content: 'website',\n        },\n        {\n          name: 'twitter:card',\n          content: 'summary',\n        },\n        {\n          name: 'twitter:creator',\n          content: site.siteMetadata.author,\n        },\n        {\n          name: 'twitter:title',\n          content: title,\n        },\n        {\n          name: 'twitter:description',\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  lang: 'es',\n  meta: [],\n  description: '',\n  home: false,\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n  home: PropTypes.bool,\n};\n\nexport default SEO;\n"],"sourceRoot":""}